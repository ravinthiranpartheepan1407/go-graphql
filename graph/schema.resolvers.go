package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.22

import (
	"context"
	"fmt"
	"ravi-graphql/graph/model"
)

// CreateLink is the resolver for the createLink field.
func (r *mutationResolver) CreateLink(ctx context.Context, input model.NewLink) (*model.Link, error) {
	// panic(fmt.Errorf("not implemented: CreateLink - createLink"))
	var link model.Link
	var user model.User
	link.Address = input.Address
	link.Title = input.Title
	var name = user.Name
	name = "Ravi"
	link.User = name
	return &link, nil
}

// CreateUser is the resolver for the createUser field.
func (r *mutationResolver) CreateUser(ctx context.Context, input model.NewUser) (string, error) {
	panic(fmt.Errorf("not implemented: CreateUser - createUser"))
}

// Login is the resolver for the login field.
func (r *mutationResolver) Login(ctx context.Context, input model.Login) (string, error) {
	panic(fmt.Errorf("not implemented: Login - login"))
}

// RefreshToken is the resolver for the refreshToken field.
func (r *mutationResolver) RefreshToken(ctx context.Context, input model.RefereshTokenInput) (string, error) {
	panic(fmt.Errorf("not implemented: RefreshToken - refreshToken"))
}

// Link is the resolver for the link field.
func (r *queryResolver) Link(ctx context.Context) ([]*model.Link, error) {
	// panic(fmt.Errorf("not implemented: Link - link"))
	var links []*model.Link
	dummyLink := model.Link{
		Title:   "First Link",
		Address: "https://ravinthiranpartheepanwiki.super.site/",
		User:    "Admin",
	}
	// var customers []*model.Link
	// dummyCustomer := model.Link{
	// 	Title:   "Customer Link",
	// 	Address: "Google.com",
	// 	User:    "Customer",
	// }
	// customers = append(customers, &dummyCustomer)
	// return customers, nil

	links = append(links, &dummyLink)
	return links, nil
}

// Mutation returns MutationResolver implementation.
func (r *Resolver) Mutation() MutationResolver { return &mutationResolver{r} }

// Query returns QueryResolver implementation.
func (r *Resolver) Query() QueryResolver { return &queryResolver{r} }

type mutationResolver struct{ *Resolver }
type queryResolver struct{ *Resolver }
